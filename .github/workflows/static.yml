# .github/workflows/deploy.yml

name: Build and Deploy to GitHub Pages

# Dieser Workflow startet, wenn du auf den 'main'-Branch pushst
on:
  push:
    branches:
      - main # oder 'master', je nachdem, wie dein Hauptbranch heißt

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Verwendet eine virtuelle Ubuntu-Maschine

    steps:
      # Schritt 1: Code aus dem Repository auschecken
      - name: Checkout 🛎️
        uses: actions/checkout@v3

      # NEUER SCHRITT: Zeige die Dateistruktur an
      - name: List files in the repository
        run: ls -R

      # Schritt 2: Dynamisch die environment.prod.ts erstellen
      # Hier verwenden wir die Secrets, die du in den Repository-Einstellungen angelegt hast
      - name: Create environment.prod.ts 🤫
        run: |
          echo "export const environment = {" > ./SnackTrack/src/environments/environment.prod.ts
          echo "  production: true," >> ./SnackTrack/src/environments/environment.prod.ts
          echo "  supabaseUrl: '${{ secrets.SUPABASE_URL }}'," >> ./SnackTrack/src/environments/environment.prod.ts
          echo "  supabaseKey: '${{ secrets.SUPABASE_ANON_KEY }}'" >> ./SnackTrack/src/environments/environment.prod.ts
          echo "};" >> ./SnackTrack/src/environments/environment.prod.ts

      # Schritt 3: Node.js einrichten
      - name: Setup Node.js ⚙️
        uses: actions/setup-node@v3
        with:
          node-version: '18' # Wähle die passende Node.js-Version
          cache: 'npm'

      # Schritt 4: Abhängigkeiten installieren und App bauen
      - name: Install and Build 🔨
        run: |
          npm install
          # WICHTIG: Passe den Build-Befehl an dein Projekt an!
          # --base-href muss dem Namen deines Repositorys entsprechen.
          npm run build -- --configuration production --base-href /snacktrack/

      # Schritt 5: Gebaute App auf GitHub Pages deployen
      - name: Deploy 🚀
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Der Ordner, in dem sich die gebaute App befindet (oft 'www' bei Ionic/Angular)
          publish_dir: ./www
